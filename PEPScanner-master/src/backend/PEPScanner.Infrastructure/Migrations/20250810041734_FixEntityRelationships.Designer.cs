// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PEPScanner.Infrastructure.Data;

#nullable disable

namespace PEPScanner.Infrastructure.Migrations
{
    [DbContext(typeof(PepScannerDbContext))]
    [Migration("20250810041734_FixEntityRelationships")]
    partial class FixEntityRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("PEPScanner.Domain.Entities.Alert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActualHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ComplianceAction")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EscalatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("EscalatedTo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EscalationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MatchAlgorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MatchedFields")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("MatchingDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Outcome")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("OutcomeNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresEdd")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresSar")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresStr")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReviewedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RiskLevel")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SarFiledAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("SarFiledBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SarReference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("SimilarityScore")
                        .HasColumnType("REAL");

                    b.Property<int?>("SlaHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SlaStatus")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceCategory")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceList")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StrFiledAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("StrFiledBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StrReference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubCategory")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TransactionAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WatchlistEntryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WatchlistEntryId1")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAtUtc")
                        .HasDatabaseName("IX_Alert_CreatedAtUtc");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Alert_Status");

                    b.HasIndex("WatchlistEntryId");

                    b.HasIndex("WatchlistEntryId1");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Hour")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewValues")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValues")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OrganizationUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserRole")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationUserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("AliasNames")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("AverageTransactionAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("EddNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Employer")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FaceBiometricData")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FingerprintData")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentificationType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPep")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastScreeningDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MonthlyTransactionVolume")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextScreeningDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Occupation")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OrganizationId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("PepCountry")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PepEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PepPosition")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PepStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresEdd")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("RiskScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScreeningFrequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationId1");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.CustomerDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentFormat")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuingAuthority")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuingCountry")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("VerificationNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VerifiedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerDocuments");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.CustomerRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RelatedCustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelationshipDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RelatedCustomerId");

                    b.ToTable("CustomerRelationships");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.NotificationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AlertId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Recipient")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SentAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NotificationLogs");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTrial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxCustomers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RegulatoryBody")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SubscriptionEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriptionPlan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SubscriptionStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.OrganizationConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizationId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationId1");

                    b.ToTable("OrganizationConfigurations");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.OrganizationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastLoginAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizationId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PasswordChangedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationId1");

                    b.ToTable("OrganizationUsers");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.OrganizationWatchlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoAlert")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUpdateAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<double>("MatchThreshold")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("NextUpdateAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizationId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireReview")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdateFrequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("WatchlistSource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("WatchlistType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationId1");

                    b.ToTable("OrganizationWatchlists");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.ScreeningJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AlertsGenerated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Configuration")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("InputFile")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("MatchesFound")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OutputFile")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProcessedRecords")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalRecords")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TriggeredBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAtUtc")
                        .HasDatabaseName("IX_ScreeningJob_CreatedAtUtc");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ScreeningJob_Status");

                    b.ToTable("ScreeningJobs");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.WatchlistEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AddedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("AircraftOperator")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AircraftRegistration")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AircraftType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Citizenship")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryOfResidence")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DataQuality")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAddedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastUpdatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirthFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirthTo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateRemovedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWhitelisted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ListType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaCategory")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MediaDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaSource")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaSummary")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalIdNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PepCategory")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PepCountry")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PepDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PepEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PepPosition")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PepStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionOrRole")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RemovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RiskCategory")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RiskLevel")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SanctionAuthority")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SanctionEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SanctionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("SanctionReference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SanctionStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SanctionType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxIdNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("VesselCallSign")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("VesselFlag")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("VesselImoNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("VesselName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("VesselType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryName")
                        .HasDatabaseName("IX_WatchlistEntry_PrimaryName");

                    b.HasIndex("Source")
                        .HasDatabaseName("IX_WatchlistEntry_Source");

                    b.HasIndex("Source", "PrimaryName")
                        .HasDatabaseName("IX_WatchlistEntry_Source_PrimaryName");

                    b.ToTable("WatchlistEntries");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.Alert", b =>
                {
                    b.HasOne("PEPScanner.Domain.Entities.Customer", "Customer")
                        .WithMany("Alerts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PEPScanner.Domain.Entities.WatchlistEntry", "WatchlistEntry")
                        .WithMany()
                        .HasForeignKey("WatchlistEntryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PEPScanner.Domain.Entities.WatchlistEntry", null)
                        .WithMany("Alerts")
                        .HasForeignKey("WatchlistEntryId1");

                    b.Navigation("Customer");

                    b.Navigation("WatchlistEntry");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("PEPScanner.Domain.Entities.OrganizationUser", null)
                        .WithMany("AuditLogs")
                        .HasForeignKey("OrganizationUserId");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.Customer", b =>
                {
                    b.HasOne("PEPScanner.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PEPScanner.Domain.Entities.Organization", null)
                        .WithMany("Customers")
                        .HasForeignKey("OrganizationId1");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.CustomerDocument", b =>
                {
                    b.HasOne("PEPScanner.Domain.Entities.Customer", "Customer")
                        .WithMany("Documents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.CustomerRelationship", b =>
                {
                    b.HasOne("PEPScanner.Domain.Entities.Customer", "Customer")
                        .WithMany("Relationships")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PEPScanner.Domain.Entities.Customer", "RelatedCustomer")
                        .WithMany()
                        .HasForeignKey("RelatedCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("RelatedCustomer");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.OrganizationConfiguration", b =>
                {
                    b.HasOne("PEPScanner.Domain.Entities.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PEPScanner.Domain.Entities.Organization", "Organization")
                        .WithMany("Configurations")
                        .HasForeignKey("OrganizationId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.OrganizationUser", b =>
                {
                    b.HasOne("PEPScanner.Domain.Entities.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PEPScanner.Domain.Entities.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.OrganizationWatchlist", b =>
                {
                    b.HasOne("PEPScanner.Domain.Entities.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PEPScanner.Domain.Entities.Organization", "Organization")
                        .WithMany("Watchlists")
                        .HasForeignKey("OrganizationId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Documents");

                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.Organization", b =>
                {
                    b.Navigation("Configurations");

                    b.Navigation("Customers");

                    b.Navigation("Users");

                    b.Navigation("Watchlists");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.OrganizationUser", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("PEPScanner.Domain.Entities.WatchlistEntry", b =>
                {
                    b.Navigation("Alerts");
                });
#pragma warning restore 612, 618
        }
    }
}
